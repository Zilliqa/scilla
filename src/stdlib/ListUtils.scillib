library ListUtils

(* list_foldl with early termination. Continues recursing as long as f returns Some _.
   Once f returns None, the recursion terminates. *)
let list_foldl_while : forall 'A. forall 'B.
  ('B -> 'A -> Option 'B) -> 'B -> List 'A -> 'B =
  tfun 'A => tfun 'B =>
  fun (f : 'B -> 'A -> Option 'B) =>
    let foldk = @list_foldk 'A 'B in
    let whilel_f = fun (z : 'B) => fun(x : 'A) => fun (recurse : 'B -> 'B) =>
      let res = f z x in
      match res with
      | Some acc => recurse acc
      | None => z
      end in
    foldk whilel_f

(* Apply (f : 'A -> 'B) to every element of List 'A *)
(* to generate List 'B. *)
let list_map : forall 'A. forall 'B. ('A -> 'B) -> List 'A -> List 'B = 
  tfun 'A => tfun 'B =>
  fun (f : 'A -> 'B) =>
  let foldr = @list_foldr 'A (List 'B) in
  let iter = fun (h : 'A) => fun (z : List 'B) =>
    let h1 = f h in
    Cons {'B} h1 z in
  let init = Nil {'B} in
  foldr iter init

(* Preserving the order of elements in (l : List 'A),  *)
(* return new list containing only those elements *)
(* that satisfy the function f. *)
let list_filter : forall 'A. ('A -> Bool) -> List 'A -> List 'A =
  tfun 'A =>
  fun (f : 'A -> Bool) =>
    let foldr = @list_foldr 'A (List 'A) in
    let iter = fun (h : 'A) => fun (z : List 'A) =>
      let h1 = f h in
      match h1 with
      | True => Cons {'A} h z
      | False => z
      end in
    let init = Nil {'A} in
    foldr iter init

(* Return the head element of a list as Some 'A, None otherwise *)
let list_head : forall 'A. List 'A -> Option 'A =
  tfun 'A =>
  fun (l : List 'A) =>
    match l with
    | Cons h t => Some {'A} h
    | Nil => None {'A}
    end

(* Return the list except for the head *)
let list_tail : forall 'A. List 'A -> Option (List 'A) =
  tfun 'A =>
  fun (l : List 'A) =>
    match l with
    | Cons _ t => Some {(List 'A)} t
    | Nil => None {(List 'A)}
    end

(* Append the second list to the first one and return a new List *)
let list_append : forall 'A. List 'A -> List 'A -> List 'A =
  tfun 'A =>
  fun (l1 : List 'A) =>
  fun (l2 : List 'A) =>
    (* Fold right over l1 and keep prepending elements to l2 *)
    let foldr = @list_foldr 'A (List 'A) in
    let iter = fun (h : 'A) => fun (z : List 'A) =>
      Cons {'A} h z in
    (* l2 is the initial accumulator *)
    foldr iter l2 l1

(* Return the reverse of the argument list *)
let list_reverse : forall 'A. List 'A -> List 'A =
  tfun 'A =>
  let foldl = @list_foldl 'A (List 'A) in
  let iter = fun (z : List 'A) => fun (h : 'A) =>
    Cons {'A} h z in
  let init = Nil {'A} in
  foldl iter init

(* Concatenate a list of lists. The elements of the argument are all *)
(* concatenated together (in the same order) to give the result. *)
let list_flatten : forall 'A. List (List 'A) -> List 'A =
  tfun 'A =>
  let foldr = @list_foldr (List 'A) (List 'A) in
  let app = @list_append 'A in
  let iter = fun (h : List 'A) => fun (z : List 'A) =>
    app h z in
  let init = Nil {'A} in
  foldr iter init

(* Number of elements in list *)
let list_length : forall 'A. List 'A -> Uint32 =
  tfun 'A =>
  let foldl = @list_foldl 'A Uint32 in
  let one = Uint32 1 in
  let iter = fun (z : Uint32) => fun (h : 'A) =>
    builtin add one z in
  let init = Uint32 0 in
  foldl iter init

(* Not for public use, to be removed in next major version *)
(* Returns Some Nil on successful match. None otherwise. *)
let list_eq_helper : forall 'A. ('A -> 'A -> Bool) ->
  List 'A -> List 'A -> Option (List 'A) =
  tfun 'A =>
  fun (eq : 'A -> 'A -> Bool) =>
  fun (l1 : List 'A) =>
  fun (l2 : List 'A) =>
    let foldl = @list_foldl 'A (Option (List 'A)) in
    let tailF = @list_tail 'A in
    let headF = @list_head 'A in
    let iter = fun (z : Option (List 'A)) => fun (h1 : 'A) =>
      match z with
      | Some ll2 =>
        let h2o = headF ll2 in
        match h2o with
        | Some h2 =>
          let eqb = eq h1 h2 in
          match eqb with
          | True => tailF ll2
          | False => None {(List 'A)}
          end
        | None => None {(List 'A)}
        end
      | None => None {(List 'A)}
      end in
    let init = Some {(List 'A)} l2 in
    foldl iter init l1

(* Return true iff two lists compare equal. *)
(* Comparison is performed using the "equal" function provided. *)
let list_eq : forall 'A. ('A -> 'A -> Bool) -> List 'A -> List 'A -> Bool =
  tfun 'A =>
  fun (equal : 'A -> 'A -> Bool) =>
  fun (l1 : List 'A) => fun (l2 : List 'A) =>
    let foldk = @list_foldk 'A (List 'A) in
    let iter =
      fun (xs2 : List 'A) => fun (x1 : 'A) =>
      fun (recurse : List 'A -> List 'A) =>
        match xs2 with
        | Cons x2 tl2 =>
          let eq_x1_x2 = equal x1 x2 in
          match eq_x1_x2 with
          | True => recurse tl2
          | False => l1   (* l1 is not empty in this context *)
          end
        | Nil => l1       (* l1 is not empty in this context *)
        end in
    let remaining = foldk iter l2 l1 in
    match remaining with
    | Cons _ _ => False
    | Nil => True
    end

(* Return True iff all elements of list "l" satisfy predicate "p". *)
let list_forall : forall 'A. ('A -> Bool) -> List 'A -> Bool =
  tfun 'A =>
  fun (p : 'A -> Bool) =>
    let foldk = @list_foldk 'A Bool in
    let sat_p =
      fun (ignore : Bool) => fun (x: 'A) =>
      fun (recurse: Bool -> Bool) =>
        let p_x = p x in
        match p_x with
        | True => recurse p_x
        | False => False
        end in
    (* vacuously true if empty list *)
    let init = True in
    foldk sat_p init

(* Stable sort the input list "l". *)
(* "flt" returns True if the first argument is lesser-than the second *)
let list_sort : forall 'A. ('A -> 'A -> Bool) -> List 'A -> List 'A =
  (* Insertion sort *)
  tfun 'A =>
  fun (flt : 'A -> 'A -> Bool) =>
  fun (ls : List 'A) =>
    let true = True in 
    let false = False in
    let rec_A_A = @list_foldr 'A (List 'A) in
    let rec_A_Pair = @list_foldr 'A (Pair Bool (List 'A))  in
    let nil_A = Nil {'A} in 
    let sink_down = fun (e : 'A) => fun (ls : List 'A) =>
      let init = Pair {Bool (List 'A)} false nil_A in
      let iter1 = fun (h : 'A) => fun (res : Pair Bool (List 'A)) =>
        match res with
        | Pair True rest =>
          let z = Cons {'A} h rest in
          Pair {Bool (List 'A)} true z
        | Pair False rest =>
          let bl = flt h e in
          match bl with
          | True =>
            let z = Cons {'A} e rest in
            let z2 = Cons {'A} h z in
            Pair {Bool (List 'A)} true z2
          | False =>
            let z = Cons {'A} h rest in
            Pair {Bool (List 'A)} false z
          end
        end in
      let res1 = rec_A_Pair iter1 init ls in
      match res1 with
      | Pair True ls1 => ls1
      | Pair False ls1 => Cons {'A} e ls1
      end in
    rec_A_A sink_down nil_A ls


(* Return Some a, where "a" is the first element of *)
(* "l" that satisfies the predicate "f". *)
(* Return None iff none of the elements in "l" satisfy "f". *)
let list_find : forall 'A. ('A -> Bool) -> List 'A -> Option 'A =
  tfun 'A =>
  fun (p : 'A -> Bool) =>
    let foldk = @list_foldk 'A (Option 'A) in
    let init = None {'A} in
    (* continue fold on None, exit fold when Some compare st. p(compare) *)
    let predicate_step =
      fun (ignore : Option 'A) => fun (x : 'A) =>
      fun (recurse: Option 'A -> Option 'A) =>
        let p_x = p x in
        match p_x with
        | True => Some {'A} x
        | False => recurse init
        end in
    foldk predicate_step init

(* Return True iff at least one element of list "l" satisfy predicate "f". *)
let list_exists : forall 'A. ('A -> Bool) -> List 'A -> Bool =
  tfun 'A =>
  fun (p : 'A -> Bool) => fun (ls: List 'A) =>
    let find = @list_find 'A in
    let search = find p ls in
    match search with
    | Some _ => True
    | None => False
    end

(* Return True iff "m" is in the list "l", as compared by function "f". *)
let list_mem : forall 'A. ('A -> 'A -> Bool) -> 'A -> List 'A -> Bool =
  tfun 'A =>
  fun (f : 'A -> 'A -> Bool) => fun (m : 'A) =>
    let ex_pred = f m in
    let ex = @list_exists 'A in
    ex ex_pred

(* Combine corresponding elements of m1 and m2 using "f" *)
(* and return the resulting list of 'C. In case of different number *)
(* of elements in the lists, the extra elements are ignored. *)
let list_zip_with : forall 'A. forall 'B. forall 'C.
  ('A -> 'B -> 'C) -> List 'A -> List 'B -> List 'C =
  tfun 'A => tfun 'B => tfun 'C =>
  fun (f : 'A -> 'B -> 'C) =>
  fun (l1: List 'A) =>
  fun (l2: List 'B) =>
    (* Fail when l1 empty, empty l2 case done by foldk *)
    let zip_step = fun (state : Pair (List 'C) (List 'A)) => fun (y : 'B) =>
      match state with
      | Pair res_rev rest_a =>
        match rest_a with
        | Cons x xs =>
          let next = f x y in
          let next_res_rev = Cons {'C} next res_rev in
          let next_rest_a = Pair { (List 'C) (List 'A) } next_res_rev xs in
          Some {(Pair (List 'C) (List 'A))} next_rest_a
        | Nil => None {(Pair (List 'C) (List 'A))}
        end
      end in
    let foldl_while = @list_foldl_while 'B (Pair (List 'C) (List 'A)) in
    let nil = Nil {'C} in
    let init = Pair {(List 'C) (List 'A)} nil l1 in
    let zipped_accompanied = foldl_while zip_step init l2 in
    let reverse = @list_reverse 'C in
    match zipped_accompanied with
    | Pair rev_res _ => reverse rev_res
    end

(* Combine corresponding elements of m1 and m2 into a pair *)
(* and return the resulting list. In case of different number *)
(* of elements in the lists, the extra elements are ignored. *)
let list_zip : forall 'A. forall 'B. List 'A -> List 'B -> List (Pair 'A 'B) =
  tfun 'A => tfun 'B =>
  let zip_with = @list_zip_with 'A 'B (Pair 'A 'B) in
  let pair_up = fun (a : 'A) => fun (b : 'B) =>
    Pair {'A 'B} a b in
  zip_with pair_up

let list_unzip : forall 'A. forall 'B.
  List (Pair 'A 'B) -> Pair (List 'A) (List 'B) =
  tfun 'A => tfun 'B =>
  let foldr = @list_foldr (Pair 'A 'B) (Pair (List 'A) (List 'B)) in
  let iter = fun (h : Pair 'A 'B) => fun (z : Pair (List 'A) (List 'B)) =>
    match h with
    | Pair a b =>
      match z with
      | Pair la lb =>
        let nla = Cons {'A} a la in
        let nlb = Cons {'B} b lb in
        Pair {(List 'A)(List 'B)} nla nlb
      end
    end in
  let nila = Nil {'A} in
  let nilb = Nil {'B} in
  let init = Pair {(List 'A) (List 'B)} nila nilb in
  foldr iter init

(* Returns (Some 'A) if n'th element exists in list. None otherwise *)
let list_nth : forall 'A. Uint32 -> List 'A -> Option 'A =
  tfun 'A =>
  fun (n : Uint32) => fun (l : List 'A) =>
    let foldk = @list_foldk 'A (Pair Uint32 (Option 'A)) in
    let none = None {'A} in
    let zero = Uint32 0 in
    let one = Uint32 1 in
    (* each step brings down counter with no result, on zero stop with result *)
    let iter =
      fun (counter : Pair Uint32 (Option 'A)) =>
      fun (x : 'A) =>
      fun (recurse: (Pair Uint32 (Option 'A)) -> (Pair Uint32 (Option 'A))) =>
        match counter with
        | Pair count _ =>
          let is_zero = builtin eq zero count in
          match is_zero with
          | True =>
            let res = Some {'A} x in
            Pair {Uint32 (Option 'A)} count res
          | False => 
            let count_sub_1 = builtin sub count one in
            let res = Pair {Uint32 (Option 'A)} count_sub_1 none in
            recurse res
          end
        end in
    let init = Pair {Uint32 (Option 'A)} n none in
    let search = foldk iter init l in
    match search with
    | Pair _ discovery => discovery
    end
