(* ******************************************************************************** *)
(*   This file is part of scilla.                                                   *)
(*                                                                                  *)
(*   Copyright (c) 2018 - present Zilliqa Research Pvt. Ltd.                        *)
(*                                                                                  *)
(*   scilla is free software: you can redistribute it and/or modify it under the    *)
(*   terms of the GNU General Public License as published by the Free Software      *)
(*   Foundation, either version 3 of the License, or (at your option) any later     *)
(*   version.                                                                       *)
(*                                                                                  *)
(*   scilla is distributed in the hope that it will be useful, but WITHOUT ANY      *)
(*   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR  *)
(*   A PARTICULAR PURPOSE.  See the GNU General Public License for more details.    *)
(*                                                                                  *)
(*   You should have received a copy of the GNU General Public License along with   *)
(*   scilla.  If not, see <http://www.gnu.org/licenses/>.                           *)
(* ******************************************************************************** *)
scilla_version 0

library BoolUtils

let andb : Bool -> Bool -> Bool = 
  fun (b : Bool) =>
  fun (c : Bool) =>
    match b with 
    | False => False
    | True  => c
    end

let orb : Bool -> Bool -> Bool = 
  fun (b : Bool) => fun (c : Bool) =>
    match b with 
    | True  => True
    | False => c
    end

let negb : Bool -> Bool = 
  fun (b : Bool) => 
    match b with
    | True => False
    | False => True
    end

let bool_to_string : Bool -> String = 
  fun (flag: Bool) =>
    match flag with
    | True => "True"
    | False => "False"
    end

let orb_3 : Bool -> Bool -> Bool -> Bool =
  fun (a : Bool) => fun (b : Bool) => fun (c : Bool) =>
    let t = orb a b in
    orb c t

let and_3 : Bool -> Bool -> Bool -> Bool =
  fun (a : Bool) => fun (b : Bool) => fun (c : Bool) =>
    let t = andb a b in
    andb c t

let orb_4 : Bool -> Bool -> Bool -> Bool -> Bool =
  fun (a : Bool) => fun (b : Bool) => fun (c : Bool) => fun (d : Bool) =>
    let t1 = orb a b in
    let t2 = orb t1 c in
    orb t2 d

let and_4 : Bool -> Bool -> Bool -> Bool -> Bool =
  fun (a : Bool) => fun (b : Bool) => fun (c : Bool) => fun (d : Bool) =>
    let t1 = andb a b in
    let t2 = andb t1 c in
    andb t2 d
