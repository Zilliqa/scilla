(ocamllex
 (modules ScillaLexer))

(menhir
 (flags "--table")
 (modules ScillaParser))

;; Generate ParserFaults module (to make parsing messages more user-friendly)

(rule
 (targets ParserFaults.ml)
 (deps ParserFaults.messages ScillaParser.mly)
 (action
  (with-stdout-to
   ParserFaults.ml
   (run %{bin:menhir} --compile-errors ParserFaults.messages ScillaParser.mly))))

(library
 (name scilla_base)
 (modes byte native)
 (public_name scilla.base)
 (wrapped true)
 (libraries core num hex stdint angstrom polynomials cryptokit secp256k1
   bitstring yojson fileutils scilla_crypto menhirLib)
 (preprocess
  (pps ppx_sexp_conv ppx_let ppx_deriving.show ppx_compare bisect_ppx
    --conditional))
 (synopsis "Scilla workbench implementation."))
