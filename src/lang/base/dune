(ocamllex
 (modules ScillaLexer))

(menhir
 (flags "--table")
 (modules ScillaParser))

;; Generate ParserFaults module (to make parsing messages more user-friendly)

(rule
 (targets ParserFaults.ml)
 (deps ParserFaults.messages ScillaParser.mly)
 (action
  (with-stdout-to
   ParserFaults.ml
   (run %{bin:menhir} --compile-errors ParserFaults.messages ScillaParser.mly))))

(library
 (name scilla_base)
 (wrapped false)
 (libraries core ppx_sexp_conv num hex stdint batteries ppx_deriving.show
   cryptokit secp256k1 bitstring yojson scilla_cpp_deps scilla_util menhirLib)
 (preprocess
  (pps ppx_sexp_conv ppx_let ppx_deriving.show bisect_ppx -conditional))
 (synopsis "Scilla workbench implementation."))
