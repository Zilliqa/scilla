
let proof_Ax = 0x1c76476f4def4bb94541d57ebba1193381ffa7aa76ada664dd31c16024c43f59 in
let proof_Ay = 0x3034dd2920f673e204fee2811c678745fc819b55d3e9d294e45c9b03a76aef41 in
let proof_A = Pair {ByStr32 ByStr32} proof_Ax proof_Ay in
let vk_Ax = 0x209dd15ebff5d46c4bd888e51a93cf99a7329636c63514396b4a452003a35bf704bf11ca01483bfa8b34b43561848d28905960114c8ac04049af4b6315a41678 in
let vk_Ay = 0x2bb8324af6cfc93537a2ad1a445cfd0ca2a71acd7ac41fadbf933c2a51be344d120a2a4cf30c1bf9845f20c6fe39e07ea2cce61f0c9bb048165fe5e4de877550 in
let vk_A = Pair {ByStr64 ByStr64} vk_Ax vk_Ay in

let pair1 =  Pair {(Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64)} proof_A vk_A in

let proof_Apx = 0x111e129f1cf1097710d41c4ac70fcdfa5ba2023c6ff1cbeac322de49d1b6df7c in
let proof_Apy = 0x2032c61a830e3c17286de9462bf242fca2883585b93870a73853face6a6bf411 in
let proof_Ap = Pair {ByStr32 ByStr32} proof_Apx proof_Apy in
let p2x = 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed in
let p2y = 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa in
let p2 = Pair {ByStr64 ByStr64} p2x p2y in

let pair2 = Pair {(Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64)} p2 proof_Ap in

let nil = Nil {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} in
let l1 = Cons {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} pair2 nil in
let l = Cons {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} pair1 l1 in

let paired = builtin alt_bn128_pairing_product l in
let paired_test =
  match paired with
  | Some True => True
  | _ => False
  end
in

(* ******************************************************************************************* *)
let succm = "Success" in
let failm = "Fail" in

let succ = paired_test in
  
match succ with
| True => succm
| False => failm
end
