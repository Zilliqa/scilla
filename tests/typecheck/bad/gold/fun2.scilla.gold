Type checking failed:
[typecheck/bad/fun2.scilla:1:20]: Couldn't resolve the identifier y in the type environment
{ [uint32_to_nat_helper : Option (Uint32) -> Option (Nat)],
  [x : Int32],
  [int32_to_nat : Int32 -> Option (Nat)],
  [list_to_map : forall 'A. forall 'B. List (Pair ('A) ('B)) -> Map ('A) ('B)],
  [nat_fold : forall 'T. ('T -> Nat -> 'T) -> 'T -> Nat -> 'T],
  [int64_to_nat : Int64 -> Option (Nat)],
  [list_append : forall 'A. List ('A) -> List ('A) -> List ('A)],
  [list_zip : forall 'A. forall 'B. List ('A) -> List ('B) -> List (Pair ('A) ('B))],
  [list_flatten : forall 'A. List (List ('A)) -> List ('A)],
  [is_some_zero : Nat -> Bool],
  [list_filter : forall 'A. ('A -> Bool) -> List ('A) -> List ('A)],
  [list_head : forall 'A. List ('A) -> Option ('A)],
  [nat_prev : Nat -> Option (Nat)],
  [nat_to_int : Nat -> Uint32],
  [list_forall : forall 'A. ('A -> Bool) -> List ('A) -> Bool],
  [uint64_to_nat : Uint64 -> Option (Nat)],
  [list_reverse : forall 'A. List ('A) -> List ('A)],
  [int128_to_nat : Int128 -> Option (Nat)],
  [list_nth : forall 'A. Int32 -> List ('A) -> Option ('A)],
  [list_sort : forall 'A. ('A -> 'A -> Bool) -> List ('A) -> List ('A)],
  [uint128_to_nat : Uint128 -> Option (Nat)],
  [list_eq_helper : forall 'A. ('A -> 'A -> Bool) -> List ('A) -> List ('A) -> Option (List ('A))],
  [list_eq : forall 'A. ('A -> 'A -> Bool) -> List ('A) -> List ('A) -> Bool],
  [list_length : forall 'A. List ('A) -> Int32],
  [andb : Bool -> Bool -> Bool],
  [list_map : forall 'A. forall 'B. ('A -> 'B) -> List ('A) -> List ('B)],
  [nat_eq : Nat -> Nat -> Bool],
  [negb : Bool -> Bool],
  [list_tail : forall 'A. List ('A) -> Option (List ('A))],
  [list_mem : forall 'A. ('A -> 'A -> Bool) -> 'A -> List ('A) -> Bool],
  [list_foldl : forall 'A. forall 'B. ('B -> 'A -> 'B) -> 'B -> List ('A) -> 'B],
  [list_exists : forall 'A. ('A -> Bool) -> List ('A) -> Bool],
  [list_foldr : forall 'A. forall 'B. ('A -> 'B -> 'B) -> 'B -> List ('A) -> 'B],
  [snd : forall 'A. forall 'B. Pair ('A) ('B) -> 'B],
  [uint32_to_nat : Uint32 -> Option (Nat)],
  [list_zip_with : forall 'A. forall 'B. forall 'C. ('A -> 'B -> 'C) -> List ('A) -> List ('B) -> List ('C)],
  [orb : Bool -> Bool -> Bool],
  [fst : forall 'A. forall 'B. Pair ('A) ('B) -> 'A],
  [list_find : forall 'A. ('A -> Bool) -> List ('A) -> Option ('A)],
  [list_unzip : forall 'A. forall 'B. List (Pair ('A) ('B)) -> Pair (List ('A)) (List ('B))] }
