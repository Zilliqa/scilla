(Map(((StringLit four)(IntLit 4))((StringLit three)(IntLit 3))((StringLit two)(IntLit 2))((StringLit one)(IntLit 1)))),
{ [l4 -> (ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit one)(IntLit 1)))(ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit two)(IntLit 2)))(ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit three)(IntLit 3)))(ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit four)(IntLit 4)))(ADTValue Nil()())))))))))],
  [l3 -> (ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit two)(IntLit 2)))(ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit three)(IntLit 3)))(ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit four)(IntLit 4)))(ADTValue Nil()())))))))],
  [l2 -> (ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit three)(IntLit 3)))(ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit four)(IntLit 4)))(ADTValue Nil()())))))],
  [l1 -> (ADTValue Cons((ADT Pair((ADT String((PrimType Int))))))((ADTValue Pair((ADT String((PrimType Int))))((StringLit four)(IntLit 4)))(ADTValue Nil()())))],
  [nil -> (ADTValue Nil()())],
  [pair4 -> (ADTValue Pair((ADT String((PrimType Int))))((StringLit four)(IntLit 4)))],
  [pair3 -> (ADTValue Pair((ADT String((PrimType Int))))((StringLit three)(IntLit 3)))],
  [pair2 -> (ADTValue Pair((ADT String((PrimType Int))))((StringLit two)(IntLit 2)))],
  [pair1 -> (ADTValue Pair((ADT String((PrimType Int))))((StringLit one)(IntLit 1)))],
  [fours -> (StringLit four)],
  [threes -> (StringLit three)],
  [twos -> (StringLit two)],
  [ones -> (StringLit one)],
  [four -> (IntLit 4)],
  [three -> (IntLit 3)],
  [two -> (IntLit 2)],
  [one -> (IntLit 1)],
  [to_map -> <closure>],
  [list_to_map -> <type_closure>] }
