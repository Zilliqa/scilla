(ADTValue None()()),
{ [res1 -> (ADTValue Some()((IntLit 5)))],
  [l5 -> (ADTValue Cons((PrimType Int))((IntLit 5)(ADTValue Cons((PrimType Int))((IntLit 11)(ADTValue Cons((PrimType Int))((IntLit 2)(ADTValue Cons((PrimType Int))((IntLit 10)(ADTValue Cons((PrimType Int))((IntLit 1)(ADTValue Nil()())))))))))))],
  [l4 -> (ADTValue Cons((PrimType Int))((IntLit 11)(ADTValue Cons((PrimType Int))((IntLit 2)(ADTValue Cons((PrimType Int))((IntLit 10)(ADTValue Cons((PrimType Int))((IntLit 1)(ADTValue Nil()())))))))))],
  [l3 -> (ADTValue Cons((PrimType Int))((IntLit 2)(ADTValue Cons((PrimType Int))((IntLit 10)(ADTValue Cons((PrimType Int))((IntLit 1)(ADTValue Nil()())))))))],
  [l2 -> (ADTValue Cons((PrimType Int))((IntLit 10)(ADTValue Cons((PrimType Int))((IntLit 1)(ADTValue Nil()())))))],
  [l1 -> (ADTValue Cons((PrimType Int))((IntLit 1)(ADTValue Nil()())))],
  [nil -> (ADTValue Nil()())],
  [eleven -> (IntLit 11)],
  [ten -> (IntLit 10)],
  [five -> (IntLit 5)],
  [two -> (IntLit 2)],
  [one -> (IntLit 1)],
  [f -> <closure>],
  [int_find -> <closure>],
  [list_find -> <type_closure>] }
