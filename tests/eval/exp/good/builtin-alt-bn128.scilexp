let p1x = 0x18b18acfb4c2c30276db5411368e7185b311dd124691610c5d3b74034e093dc9 in
let p1y = 0x063c909c4720840cb5134cb9f59fa749755796819658d32efc0d288198f37266 in
let p2x = 0x07c2b7f58a84bd6145f00c9c2bc0bb1a187f20ff2c92963a88019e7c6a014eed in
let p2y = 0x06614e20c147e940f2d70da3f74c9a17df361706a4485c742bd6788478fa17d7 in

let sum_x = 0x2243525c5efd4b9c3d3c45ac0ca3fe4dd85e830a4ce6b65fa1eeaee202839703 in
let sum_y = 0x301d1d33be6da8e509df21cc35964723180eed7532537db9ae5e7d48f195c915 in

let p1 = Pair {ByStr32 ByStr32} p1x p1y in
let p2 = Pair {ByStr32 ByStr32} p2x p2y in

let sum = builtin alt_bn128_G1_add p1 p2 in
let sum_test =
  match sum with
  | Some (Pair sumx sumy) =>
    let xeq = builtin eq sum_x sumx in
    let yeq = builtin eq sum_y sumy in
    andb xeq yeq
  | _ => False
  end
in

(* ******************************************************************************************* *)
let px = 0x025a6f4181d2b4ea8b724290ffb40156eb0adb514c688556eb79cdea0752c2bb in
let py = 0x2eff3f31dea215f1eb86023a133a996eb6300b44da664d64251d05381bb8a02e in
let s = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3 in

let p = Pair {ByStr32 ByStr32} px py in

let mul_x = 0x14789d0d4a730b354403b5fac948113739e276c23e0258d8596ee72f9cd9d323 in
let mul_y = 0x0af18a63153e0ec25ff9f2951dd3fa90ed0197bfef6e2a1a62b5095b9d2b4a27 in

let mul = builtin alt_bn128_G1_mul p s in
let mul_test =
  match mul with
  | Some (Pair mulx muly) =>
    let xeq = builtin eq mul_x mulx in
    let yeq = builtin eq mul_y muly in
    andb xeq yeq
  | _ => False
  end
in

(* ******************************************************************************************* *)
let proof_Ax = 0x1c76476f4def4bb94541d57ebba1193381ffa7aa76ada664dd31c16024c43f59 in
let proof_Ay = 0x3034dd2920f673e204fee2811c678745fc819b55d3e9d294e45c9b03a76aef41 in
let proof_A = Pair {ByStr32 ByStr32} proof_Ax proof_Ay in
let vk_Ax = 0x209dd15ebff5d46c4bd888e51a93cf99a7329636c63514396b4a452003a35bf704bf11ca01483bfa8b34b43561848d28905960114c8ac04049af4b6315a41678 in
let vk_Ay = 0x2bb8324af6cfc93537a2ad1a445cfd0ca2a71acd7ac41fadbf933c2a51be344d120a2a4cf30c1bf9845f20c6fe39e07ea2cce61f0c9bb048165fe5e4de877550 in
let vk_A = Pair {ByStr64 ByStr64} vk_Ax vk_Ay in

let pair1 =  Pair {(Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64)} proof_A vk_A in

let proof_Apx = 0x111e129f1cf1097710d41c4ac70fcdfa5ba2023c6ff1cbeac322de49d1b6df7c in
let proof_Apy = 0x2032c61a830e3c17286de9462bf242fca2883585b93870a73853face6a6bf411 in
let proof_Ap = Pair {ByStr32 ByStr32} proof_Apx proof_Apy in
let p2x = 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c21800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed in
let p2y = 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa in
let p2 = Pair {ByStr64 ByStr64} p2x p2y in

let pair2 = Pair {(Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64)} proof_Ap p2 in

let nil = Nil {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} in
let l1 = Cons {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} pair2 nil in
let l = Cons {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} pair1 l1 in

let paired = builtin alt_bn128_pairing_product l in
let paired_test =
  match paired with
  | Some True => True
  | _ => False
  end
in

(* ******************************************************************************************* *)

let proof_A_rev = Pair {ByStr32 ByStr32} proof_Ay proof_Ax in
let pair1_err =  Pair {(Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64)} proof_A_rev vk_A in

let l1_err = Cons {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} pair2 nil in
let l_err = Cons {(Pair (Pair ByStr32 ByStr32) (Pair ByStr64 ByStr64))} pair1_err l1 in

let paired_err = builtin alt_bn128_pairing_product l_err in
let paired_err_test =
  match paired_err with
  | Some True => False
  | _ => True
  end
in

(* ******************************************************************************************* *)
let succm = "Success" in
let failm = "Fail" in

let succ =
  let b1 = andb sum_test mul_test in
  let b2 = andb paired_test b1 in
  andb paired_err_test b2
in
  
match succ with
| True => succm
| False => failm
end
