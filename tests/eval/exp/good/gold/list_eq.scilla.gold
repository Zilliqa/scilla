(ADTValue True()()),
{ [r8 -> (ADTValue False()())],
  [r7 -> (ADTValue False()())],
  [r6 -> (ADTValue True()())],
  [r5 -> (ADTValue True()())],
  [r4 -> (ADTValue False()())],
  [r3 -> (ADTValue False()())],
  [r2 -> (ADTValue False()())],
  [r1 -> (ADTValue False()())],
  [f -> <closure>],
  [l4 -> (ADTValue Cons((PrimType Int64))((IntLit 64 1)(ADTValue Cons((PrimType Int64))((IntLit 64 2)(ADTValue Cons((PrimType Int64))((IntLit 64 10)(ADTValue Cons((PrimType Int64))((IntLit 64 11)(ADTValue Nil((PrimType Int64))())))))))))],
  [l3 -> (ADTValue Cons((PrimType Int64))((IntLit 64 2)(ADTValue Cons((PrimType Int64))((IntLit 64 10)(ADTValue Cons((PrimType Int64))((IntLit 64 11)(ADTValue Nil((PrimType Int64))())))))))],
  [l2 -> (ADTValue Cons((PrimType Int64))((IntLit 64 10)(ADTValue Cons((PrimType Int64))((IntLit 64 11)(ADTValue Nil((PrimType Int64))())))))],
  [l1 -> (ADTValue Cons((PrimType Int64))((IntLit 64 11)(ADTValue Nil((PrimType Int64))())))],
  [nil -> (ADTValue Nil((PrimType Int64))())],
  [eleven -> (IntLit 64 11)],
  [ten -> (IntLit 64 10)],
  [two -> (IntLit 64 2)],
  [one -> (IntLit 64 1)],
  [int_eq -> <closure>] }
