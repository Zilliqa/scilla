let list_head =
  tfun 'A =>
  fun (l : List 'A) =>
    match l with
    | Cons h t =>
      Some {'A} h
    | Nil =>
      None {'A}
    end
in

let list_tail =
  tfun 'A =>
  fun (l : List 'A) =>
    match l with
    | Cons h t =>
      Some {'A} t
    | Nil =>
      None {'A}
    end
in

let list_reverse =
  tfun 'A =>
  fun (l : List 'A) =>
    let folder = @list_foldl 'A (List 'A) in
    let init = Nil {'A} in
    let iter =
      fun (z : List 'A) =>
      fun (h : 'A) =>
        Cons {'A} h z
    in
      folder iter init l
in
  
let list_zip =
  tfun 'A =>
  tfun 'B =>
  fun (m1 : List 'A) =>
  fun (m2 : List 'B) =>
    let list_zip_helper =
      tfun 'A =>
      tfun 'B =>
      fun (l1 : List 'A) =>
      fun (l2 : List 'B) =>
        let folder = @list_foldl 'A (Pair (List (Pair 'A 'B)) (List 'B)) in
        let nil = Nil {(Pair 'A 'B)} in
        let init = Pair {(List (Pair 'A 'B)) (List 'B)} nil l2 in
        let iter =
          fun (z : Pair (List (Pair 'A 'B)) (List 'B)) =>
          fun (h : 'A) =>
            match z with
            | Pair r b =>
              (* Get b's head, pair it with h and add to r. *)
              let header = @list_head 'B in
              let tailer = @list_tail 'B in
              let bhead = header b in
              match bhead with
              | Some bel =>
                let newp = Pair {'A 'B} h bel in
                let newp_concat = Cons {Pair 'A 'B} newp r in
                let btail = tailer b in
                let newb =
                  match btail with
                  | Some t =>
                    t
                  | None =>
                    nil
                  end
                in
                Pair {List (Pair 'A 'B) (List 'B)} newp_concat newb
              | None =>
                z
              end
            end
          in
            folder iter init l1
    in
      let zipper = @list_zip_helper 'A 'B in
      let res = zipper m1 m2 in
      match res with
      | Pair x y =>
        let reverser = @list_reverse (Pair 'A 'B) in
          reverser x
      end
in
    
let int_zip = @list_zip Uint32 Uint32 in

let one = Uint32 1 in
let two = Uint32 2 in
let three = Uint32 3 in
let four = Uint32 4 in

let nil = Nil {Uint32} in
let l0 = Cons {Uint32} four nil in
let l1 = Cons {Uint32} three l0 in
let l2 = Cons {Uint32} two l1 in
let l3 = Cons {Uint32} one l2 in

(* (1,1);(2,2);(3,3);(4,4) *)
let res1 = int_zip l3 l3 in

(* (1,2);(2,3);(3,4) *)
let res2 = int_zip l3 l2 in

(* (2,1);(3,2);(4,3) *)
int_zip l2 l3
