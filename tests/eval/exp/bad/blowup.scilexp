let list_double =
  tfun 'A =>
  fun (l : List 'A) =>
  let foldr = @list_foldr 'A (List 'A) in
  let iter =
    fun (h : 'A) =>
    fun (z : List 'A) =>
      let l1 = Cons {'A} h z in
      Cons {'A} h l1
  in
  let init = Nil {'A} in
  foldr iter init l
in

(* Produces a list whose length is length(l) * (2 ^ (length(l))) *)
let list_exp =
  tfun 'A =>
  fun (l : List 'A) =>
    let foldr = @list_foldr 'A (List 'A) in
    let iter =
      fun (h : 'A) =>
      fun (z : List 'A) =>
        let doubler = @list_double 'A in
        doubler z
    in
    let init = l in
    foldr iter init l
in

let one = Int64 1 in
let nil = Nil {Int64} in
let l1 = Cons {Int64} one nil in
let l2 = Cons {Int64} one l1 in
let l3 = Cons {Int64} one l2 in
let l4 = Cons {Int64} one l3 in
let l5 = Cons {Int64} one l4 in

let exper = @list_exp Int64 in

let l160 = exper l5 in
let l160x160 = exper l160 in
one
