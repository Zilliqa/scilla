let nat_prev = fun (n: Nat) =>
  match n with
	| Succ n1 => Some {Nat} n1
	| Zero => None {Nat}
	end in

let is_some_zero = fun (n: Nat) =>
	match n with
  | Some Zero => True
  | _ => False
	end in

let nat_eq = fun (n : Nat) => fun (m : Nat) =>
  let z = Some {Nat} m in
		let f = fun (res : Option Nat) => fun (n : Nat) =>
      match res with
      | None => None
      | Some m1 => nat_prev m1
			end in
	let folder = @nat_fold (Option Nat) in
  let e = folder f z n in
  match e with
  | Some Zero => True
  | _ => False
	end in

let zero_uint = Uint32 0 in
let zero_nat1 = builtin to_nat zero_uint in
let zero_nat2 = Zero in

let three_uint = Uint32 3 in
let three_nat1 = builtin to_nat three_uint in
let one_nat2 = Succ zero_nat2 in
let two_nat2 = Succ one_nat2 in
let three_nat2 = Succ two_nat2 in


let res1 = nat_eq zero_nat1 zero_nat2 in
nat_eq three_nat1 three_nat2
