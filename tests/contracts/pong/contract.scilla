library PingPong

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
      Cons {Message} msg nil_msg

let game_over = 0
let calling_ping = 1
let addr_not_set = 2

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract Pong

(* No immutable parameters *)
()

(* Mutable fields *)
field count : Int = 2
field ping_addr : Option Address = None {Address}

transition Pong (sender: Address)
  one = 1;
  paOpt <- ping_addr;
  match paOpt with
  | Some pingAddr =>
    cnt <- count;
    is_game_over = builtin lt cnt one;
    match is_game_over with
    | True =>
      msg = {_tag : Main; to : sender; _amount : 0; code : game_over};
      msgs = one_msg msg;
      send msgs
    | False =>
      deccount = builtin sub cnt one;
      count := deccount;
      msg = {_tag : Ping; to : pingAddr; _amount : 0; code : calling_ping};
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    msg = {_tag : Main; to : sender; _amount : 0 ; code : addr_not_set};
    msgs = one_msg msg;
    send msgs
  end
end

transition SetPingAddr (sender: Address, pingAddr : Address)
  paOpt = Some {Address} pingAddr;
  ping_addr := paOpt
end
