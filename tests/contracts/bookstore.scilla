scilla_version 0

(* Bookstore Contract *)
(* This example contract demonstrates how a CRUD app can be built. *)

(* @note: Bookstore allows members to manage a shared repository of books. *)
(* Bookstore has an owner, who can add members in. Members will be able *)
(* to add, remove and update books in the store. Access controls logic is *)
(* delibrately left out for brevity. But if you need examples, you can  *)
(* refer to `addMember` transition to see how access controls can be implemented. *)


(* In production deployments, you will want to implement proper access *)
(* control logic in your smart contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library BookStore

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* error codes library *)
let code_success = Uint32 0
let code_book_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_bookid_exist = Uint32 4

type Book =
| Book of String String

type Member =
| Member of String Uint32

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract BookStore
(owner: ByStr20,
store_name: String)

(* storeName can be immutable if it won't ever be changed             *)


(* Membership data consists of three attributes: ByStr20, Name and typeOfMember*)
(* Equivalent member data in C++ struct *)
(* struct Member {                                                    *)
(*     ByStr20 address;                                               *)
(*     String name;                                                   *)
(*     Uint32 membershipType; // 0: Regular, 1: Premium, 2: Corporate *)
(* }                                                                  *)


field members: Map ByStr20 Member
                = Emp ByStr20 Member

(* lastBookID: last book ID issued *)
field lastBookID: Option Uint32 = None {Uint32}

(* Bookinventory will store a Map of Books                          *)
field bookInventory: Map Uint32 Book 
                    = Emp Uint32 Book

(* Book data consists of three attributes: BookID, Title and Author*)
(* Equivalent member data in C++ struct *)
(* struct Book {                                                    *)
(*     Uint32 BookID;                                               *)
(*     String Book_title;                                           *)
(*     String Author;                                               *)
(* }                                                                *)

(* ======== transitions ===============*)


procedure EmitMemberEvent (status: Bool, msg: String)
  match status with
  | True =>
    e = {_eventname: "AddMemberSuccess"; message: msg};
    event e
  | False =>
    e = {_eventname: "AddMemberFailure"; message: msg};
    event e
  end
end


procedure EmitBookEvent (
  status: Bool, 
  status_code: Uint32,
  event_action: String, 
  book_id: Uint32,
  book_title: String
)
  match status with
  | True =>
    e = {
      _eventname: "BookEventSuccess";
      code: status_code;
      action: event_action; 
      id: book_id; 
      title: book_title};
    event e
  | False =>
    e = {
      _eventname: "BookEventFailure";
      code: status_code;
      action: event_action;  
      id: book_id; 
      title: book_title};
    event e
  end
end

(* @notice: add member is an example. It is not used in other functions. *)
(* @dev: in real contracts, a developer can use a members mapping to manage *)
(* access controls to grant a user permission to perform certain actions *)
(* (e.g. add/remove books) *)

transition AddMember(name: String, member_address: ByStr20, member_type: Uint32)

    (* Access control: Checking if sender is the owner of the Contract *)
    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        (* Only the owner can add member *)
        (* Check if membership type is valid. *)
        valid_type = let three = Uint32 3 in
                        builtin lt member_type three;
        match valid_type with
        | True =>

            new_member = Member name member_type;
            members[member_address] := new_member;
            status = True;
            EmitMemberEvent status name
        | False =>
            (* Code for the membership type is invalid *)
            status = False;
            msg = "Invalid membership type";
            EmitMemberEvent status msg
        end
    | False =>
        (* Unauthorized transaction *)
          status = False;
          msg = "Invalid membership type";
          EmitMemberEvent status msg
    end
end

(* @notice: Allows a `_sender` to add a book to the bookstore *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to add a book. *)
(* @param: bookName : title of the book *)
(* @param: author:     author of the book *)

transition AddBook(book_title: String, author: String, book_id: Uint32)

    (* @dev: Preconditions can be set to allow only members to add a book *)
    (* @dev: Access controls logic omitted for brevity *)

    (* new_book_id = let one = Uint32 1 in builtin add last_book_id one;*)

    does_book_exist <- exists bookInventory[book_id];
    match does_book_exist with
    | True =>
        action = "Add";
        status = False;
        EmitBookEvent status code_bookid_exist action book_id book_title
    
    | False =>
        (* Creating a new Book Model *)
        (* A new book model is a Pair of book_title and author *)
        new_book = Book book_title author;

        (* Add the new book to the book_inventory Map, with BookID as the key*)
        bookInventory[book_id] := new_book;

        tmp = Some {Uint32} book_id;
        lastBookID := tmp;

        action = "Add";
        status = True;
        EmitBookEvent status code_success action book_id book_title

    end
end

(* @notice: Allows a `_sender` to remove a book from the bookstore *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a book. *)

transition RemoveBook(book_id: Uint32)
    (* @dev: Preconditions can be set to allow only members to remove a book *)
    (* @dev: Access controls logic omitted for brevity *)
    get_book <- bookInventory[book_id];
    match get_book with
    | Some (Book book_title _) =>
      action = "Remove";
      status = True;
      EmitBookEvent status code_success action book_id book_title;
      delete bookInventory[book_id]
    | None =>
      book_title = "Error: Not Found";
      action = "Remove";
      status = False;
      EmitBookEvent status code_book_not_found action book_id book_title
    end
end

(* @notice: Allows a `_sender` to update a book from the bookstore *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a book. *)

transition updateBook(book_id: Uint32, book_title: String, author: String)
    (* @dev: Preconditions can be set to allow only members to update a book *)
    (* @dev: Access controls omitted for brevity *)
   
    (* preconditions  *)
    does_book_exist <- exists bookInventory[book_id];
    match does_book_exist with
    | False =>
        (* Book ID is not found in the records. *)
        action = "Update";
        status = False;
        EmitBookEvent status code_book_not_found action book_id book_title
    | True =>
        (* constructs book model  *)
        (* Creating a new Book Model *)
        (* A new book model is a Pair of book_title and author *)
        new_book = Book book_title author;
        (* Add the new book to the book_inventory Map, with BookID as the key*)
        bookInventory[book_id] := new_book;

        action = "Update";
        status = True;
        EmitBookEvent status code_success action book_id book_title
    end


end

