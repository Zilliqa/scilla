scilla_version 0

library Return1

let one = Int32 1

contract Return1()

field f : Int32 = Int32 0

procedure return_one() -> Int32
  a = one;
  _return := a
end

procedure forbid_negative_f()
  f <- f;
  one = return_one;
  zero = builtin sub one one;
  is_neg = builtin lt f zero;
  match is_neg with
  | True =>
    e = { _exception : "Negative f" };
    throw e
  | False =>
  end
end

procedure id(x: Int32) -> Int32
  forbid_negative_f;
  _return := x
end

procedure add(lhs: Int32, rhs: Int32) -> Int32
  lhs_ = id lhs;
  s = builtin add lhs_ rhs;
  _return := s
end

transition f_add_one()
  one = return_one;
  f_cur <- f;
  sum = add f_cur one;
  sum_id = id sum;
  f := sum
end

