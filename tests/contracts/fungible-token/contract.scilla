(* This contract implements a fungible token interface a la ERC20 *)


(***************************************************)
(*               Associated library                *)
(***************************************************)
library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(owner : Address,
 total_tokens : Uint128)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)

field balances : Map Address Uint128 =
  let m = Emp Address Uint128 in
    builtin put m owner total_tokens
field allowed : Map Address (Map Address Uint128) = Emp Address (Map Address Uint128)

transition BalanceOf (tokenOwner : Address)
  bl <- balances;
  val = builtin get bl tokenOwner;
  match val with
  | Some v =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : v };
    msgs = one_msg msg;
    send msgs
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end

transition TotalSupply ()
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; total_tokens : total_tokens};
  msgs = one_msg msg;
  send msgs
end

transition Transfer (to : Address, tokens : Uint128)
  zero = Uint128 0;
  input_err = builtin lt tokens zero;
  bl <- balances;
  bal = builtin get bl _sender;
  match bal with
  | Some b =>
    val = min_int b tokens;
    (* subtract val from _sender and add it to to *)
    new_sender_bal = builtin sub b val;
    new_balances = builtin put bl _sender new_sender_bal;
    to_bal = builtin get bl to;
    match to_bal with
    | Some x =>
      new_to_bal = builtin add x val;
      new_balances2 = builtin put new_balances to new_to_bal;
      balances := new_balances2
    | None =>
      new_balances3 = builtin put new_balances to val;
      balances := new_balances3
    end;
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : val };
  msgs = one_msg msg;
  send msgs
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end

transition TransferFrom (from : Address, to : Address, tokens : Uint128)
  zero = Uint128 0;
  input_err = builtin lt tokens zero;
  bl <- balances;
  al <- allowed;
  m = "Transfer not allowed";
  bal = builtin get bl from;
  (* Check if _sender has been authorized by "from" *)
  allowed_from = builtin get al from;
  match allowed_from with
  | Some m =>
    (* How many tokens has _sender been authorized to transfer, by "from" *)
    sender_allowed_from = builtin get m _sender;
    all = Pair {Option(Uint128) Option(Uint128)} bal sender_allowed_from;
    match all with
    | Pair (Some a) (Some b) =>
      (* We can only transfer the minimum of available or authorized tokens *)
      t = min_int a b;
      amount = min_int t tokens;
      (* amount is what we should subtract from "from" and add to "to" *)
      new_from_bal = builtin sub a amount;
      balances_1 = builtin put bl from new_from_bal;
      balances := balances_1;
      to_bal = builtin get bl to;
      match to_bal with
      | Some tb =>
        to_bal_new = builtin add tb amount;
        balances_2 = builtin put balances_1 to to_bal_new;
        balances := balances_2;
        send no_msg
      | None =>
        (* "to" has no balance. So just set it to amount *)
        balances_3 = builtin put balances_1 to amount;
        balances := balances_3;
        send no_msg
      end;
      (* reduce "allowed" by "amount" *)
      new_allowed = builtin sub b amount;
      new_m = builtin put m _sender new_allowed;
      new_allowed = builtin put al from new_m;
      allowed := new_allowed
    | Pair None None =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m };
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m };
    msgs = one_msg msg;
    send msgs
  end
end

transition Approve (spender : Address, tokens : Uint128)
  zero = Uint128 0;
  input_err = builtin lt tokens zero;
  al <- allowed;
  sender_map = builtin get al _sender;
  match sender_map with
  | Some m =>
    allowed_to_spender = builtin put m spender tokens;
    allowed_new = builtin put al _sender allowed_to_spender;
    allowed := allowed_new;
    send no_msg
  | None =>
    allowed_to_spender = let m = Emp Address Uint128 in builtin put m spender tokens;
    allowed_new = builtin put al _sender allowed_to_spender;
    allowed := allowed_new;
    send no_msg
  end
end

transition Allowance (tokenOwner : Address, spender : Address)
  al <- allowed;
  towner_map = builtin get al tokenOwner;
  match towner_map with
  | Some m =>
    spender_allowance = builtin get m spender;
    match spender_allowance with
    | Some n =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; allowed : n };
      msgs = one_msg msg;
      send msgs
    | None =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; allowed : Uint128 0 };
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; allowed : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end
