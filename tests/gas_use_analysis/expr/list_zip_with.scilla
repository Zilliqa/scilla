(* (List 'A) -> (Option 'A) *)
(* Return the head element of a list as Some 'A, None otherwise *)
let list_head =
  tfun 'A =>
  fun (l : List 'A) =>
    match l with
    | Cons h t =>
      Some {'A} h
    | Nil =>
      None {'A}
    end
in

(* (List 'A) -> (Option List 'A) *)
(* Return the list except for the head *)
let list_tail =
  tfun 'A =>
  fun (l : List 'A) =>
    match l with
    | Cons h t =>
      Some {(List 'A)} t
    | Nil =>
      None {(List 'A)}
    end
in

(* (List 'A -> List 'A) *)
(* Return the reverse of the argument list *)
let list_reverse =
  tfun 'A =>
  fun (l : List 'A) =>
    let folder = @list_foldl 'A (List 'A) in
    let init = Nil {'A} in
    let iter =
      fun (z : List 'A) =>
      fun (h : 'A) =>
        Cons {'A} h z
    in
      folder iter init l
in

(* ('A -> 'B -> 'C) -> List 'A -> List 'B -> List 'C *)
(* Combine corresponding elements of m1 and m2 using "f" *)
(* and return the resulting list of 'C. In case of different number *)
(* of elements in the lists, the extra elements are ignored. *)
let list_zip_with =
  tfun 'A =>
  tfun 'B =>
  tfun 'C =>
  fun (f : 'A -> 'B -> 'C) =>
  fun (m1 : List 'A) =>
  fun (m2 : List 'B) =>
    let list_zip_helper =
      tfun 'A =>
      tfun 'B =>
      tfun 'C =>
      fun (g : 'A -> 'B -> 'C) =>
      fun (l1 : List 'A) =>
      fun (l2 : List 'B) =>
        let folder = @list_foldl 'A (Pair (List 'C) (List 'B)) in
        let nilb = Nil {'B} in
        let nilc = Nil {'C} in
        let init = Pair {(List 'C) (List 'B)} nilc l2 in
        let iter =
          fun (z : Pair (List 'C) (List 'B)) =>
          fun (h : 'A) =>
            match z with
            | Pair r b =>
              (* Get b's head, pair it with h and add to r. *)
              let header = @list_head 'B in
              let tailer = @list_tail 'B in
              let bhead = header b in
              match bhead with
              | Some bel =>
                let newp = g h bel in
                let newp_concat = Cons {'C} newp r in
                let btail = tailer b in
                let newb =
                  match btail with
                  | Some t =>
                    t
                  | None =>
                    nilb
                  end
                in
                Pair {(List 'C) (List 'B)} newp_concat newb
              | None =>
                z
              end
            end
          in
            folder iter init l1
    in
      let zipper = @list_zip_helper 'A 'B 'C in
      let res = zipper f m1 m2 in
      match res with
      | Pair x y =>
        let reverser = @list_reverse 'C in
          reverser x
      end
in
list_zip_with
