Cashflow.ml: Distinguish between mutable and immutable fields
DeadCodeDetector: get_used_address_fields needs to distinguish between mutable and immutable fields
Gas.ml: Need to figure out how much gas to charge. Currently charging the same amount of gas as for remote reads of immutable fields, but this should either be changed to charge an amount corresponding to the size of init.json, or requires a database migration so that immutables can be read from LevelDB.
ScillaParser.mly: Need to add syntax for immutables to address types and remote reads
TypeChecker.ml: Need to handle is_mutable in address_field_type and type_remote_map_access. Maybe pass Mutable/Immutable instead of bool.
TypeUtil.ml: Need to handle is_mutable in address_field_type
StateService.ml: Nedd to handle mutable_field in external_fetch
EvalUtil.ml:
  * accept_incoming treats _balance as immutable, which might not work.
  * is_contract_addr treats _this_address as immutable, which might not work.
  * is_library_or_contract_addr treats _this_address, _balance and _nonce as immutable, which might not work.
  * typecheck_remote_fields must handle immutable fields as well
  * Note that the parser treats remote reads of _balance as mutable
Formatter.ml: of_map_access and of_stmt assumes x <-& addr.(v) syntax, which may change.

Remember to test merge and formatter tools, as well as dead code detector.

SyntaxAnnotMapper.ml: addr_kind needs to be checked for correctness. My guess is that map_id needs to take mutability into account.
