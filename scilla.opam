opam-version: "2.0"
maintainer: "ilya@zilliqa.com"
authors: ["Zilliqa Research Pvt. Ltd."]
homepage: "https://scilla-lang.org"
bug-reports: "https://github.com/Zilliqa/scilla/issues"
dev-repo: "git+https://github.com/Zilliqa/scilla.git"
license: "GPL-3.0"
depends: [
  "ocaml" {>= "4.06.1" & < "4.08~"}
  "dune" {build & >= "1.5"}
  "menhir"
  "core" {>= "v0.11" & < "v0.12~"}
  "atdgen" {>= "v2.2.0" & < "v2.3~"}
  "core_bench" {>= "v0.12" & < "v0.13~"}
  "batteries" {>= "2.9.0" & < "2.11~"}
  "bitstring" {>= "3.1.0" & < "3.2~"}
  "angstrom" {>= "0.11.0" & < "0.13~"}
  "bisect_ppx" {>= "1.4.0" & < "1.5~"}
  "cryptokit" {>= "1.13" & < "1.15~"}
  "ctypes" {>= "0.14.0" & < "0.16~"}
  "ctypes-foreign" {>= "0.4.0" & < "0.5~"}
  "fileutils" {>= "0.5.3" & < "0.7~"}
  "hex" {>= "1.3.0" & < "1.5~"}
  "yojson" {>= "1.7.0" & < "1.8~"}
  "ocaml-protoc" {>= "1.2.0" & < "2.1~"}
  "ppx_deriving" {>= "4.2.1" & < "4.5~"}
  "ppx_sexp_conv" {>= "v0.11.2" & < "v0.12~"}
  "ppx_deriving_rpc" {>= "5.9.0" & < "5.10~"}
  "secp256k1" {>= "0.4.0" & < "0.5~"}
  "stdint" {>= "0.5.1" & < "0.6~"}
  "ounit" {with-test & (>= "2.0.8" & < "2.3~")}
  "patdiff" {with-test & (>= "v0.11" & < "v0.12~")}
]
build: [
  [ "dune" "build" "-j" jobs "@install" ]
  [ "dune" "runtest" "-p" name "-j" jobs ] {with-test}
]
synopsis: "Scilla: Safe-By-Design Smart Contract Language"
description: """
Scilla, short for Smart Contract Intermediate-Level Language,
is an intermediate-level smart contract language being developed for Zilliqa.
Scilla has been designed as a principled language with smart contract safety in mind.
Scilla imposes a structure on smart contracts that will make applications less
vulnerable to attacks by eliminating certain known vulnerabilities directly at
the language-level. Furthermore, the principled structure of Scilla will make
applications inherently more secure and amenable to formal verification.
The language is being developed hand-in-hand with formalization of its semantics and
its embedding into the Coq proof assistant â€” a state-of-the art tool for
mechanized proofs about properties of programs.
"""
